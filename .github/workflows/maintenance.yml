name: Maintenance

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      update_dependencies:
        description: 'Update dependencies'
        required: false
        default: true
        type: boolean
      security_audit:
        description: 'Run security audit'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # ============================================================================
  # Dependency Updates
  # ============================================================================
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.update_dependencies == 'true'
    container:
      image: rust:1.75-bullseye
      options: --user root

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install system dependencies
      run: |
        apt-get update && apt-get install -y \
          build-essential \
          pkg-config \
          libudev-dev \
          libssl-dev \
          git

    - name: Install cargo-edit and cargo-outdated
      run: |
        cargo install cargo-edit cargo-outdated

    - name: Check for outdated dependencies
      run: |
        echo "## Dependency Status" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "### Outdated Dependencies" >> dependency-report.md
        echo "\`\`\`" >> dependency-report.md
        cargo outdated --root-deps-only >> dependency-report.md || true
        echo "\`\`\`" >> dependency-report.md

    - name: Update patch versions
      run: |
        cargo update

    - name: Run tests after update
      run: |
        cargo test --all-features

    - name: Check if updates were made
      id: check_updates
      run: |
        if git diff --quiet Cargo.lock; then
          echo "updates=false" >> $GITHUB_OUTPUT
        else
          echo "updates=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.check_updates.outputs.updates == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "chore: automated dependency updates"
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated dependency updates for patch versions.
          
          ### Changes
          - Updated Cargo.lock with latest patch versions
          - All tests pass with updated dependencies
          
          ### Testing
          - [x] Tests pass
          - [x] Build succeeds
          
          This PR was automatically created by the maintenance workflow.
        branch: chore/dependency-updates
        delete-branch: true

  # ============================================================================
  # Security Monitoring
  # ============================================================================
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.security_audit == 'true'
    container:
      image: rust:1.75-bullseye

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      id: audit
      run: |
        cargo audit --json > audit-results.json || true
        
        # Check if there are any vulnerabilities
        if cargo audit --quiet; then
          echo "status=clean" >> $GITHUB_OUTPUT
        else
          echo "status=vulnerabilities" >> $GITHUB_OUTPUT
        fi

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
        retention-days: 30

    - name: Create security issue
      if: steps.audit.outputs.status == 'vulnerabilities'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const auditResults = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
          
          let issueBody = `## Security Vulnerabilities Detected\n\n`;
          issueBody += `**Scan Date**: ${new Date().toISOString()}\n\n`;
          
          if (auditResults.vulnerabilities) {
            issueBody += `### Vulnerabilities Found: ${auditResults.vulnerabilities.found}\n\n`;
            
            auditResults.vulnerabilities.list.forEach(vuln => {
              issueBody += `#### ${vuln.advisory.title}\n`;
              issueBody += `- **Package**: ${vuln.package.name} v${vuln.package.version}\n`;
              issueBody += `- **Severity**: ${vuln.advisory.severity}\n`;
              issueBody += `- **Description**: ${vuln.advisory.description}\n`;
              issueBody += `- **URL**: ${vuln.advisory.url}\n\n`;
            });
          }
          
          issueBody += `### Action Required\n`;
          issueBody += `Please review and update the affected dependencies.\n\n`;
          issueBody += `This issue was automatically created by the security monitoring workflow.`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security: Vulnerabilities detected in dependencies`,
            body: issueBody,
            labels: ['security', 'dependencies', 'automated']
          });

  # ============================================================================
  # Code Quality Metrics
  # ============================================================================
  quality-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    container:
      image: rust:1.75-bullseye

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install system dependencies
      run: |
        apt-get update && apt-get install -y \
          build-essential \
          pkg-config \
          libudev-dev \
          libssl-dev \
          cloc

    - name: Install quality tools
      run: |
        cargo install cargo-bloat cargo-outdated

    - name: Generate code metrics
      run: |
        echo "## Code Quality Metrics" > metrics-report.md
        echo "" >> metrics-report.md
        
        echo "### Lines of Code" >> metrics-report.md
        echo "\`\`\`" >> metrics-report.md
        cloc src/ --exclude-dir=target >> metrics-report.md
        echo "\`\`\`" >> metrics-report.md
        echo "" >> metrics-report.md
        
        echo "### Binary Size Analysis" >> metrics-report.md
        echo "\`\`\`" >> metrics-report.md
        cargo build --release
        cargo bloat --release --crates >> metrics-report.md
        echo "\`\`\`" >> metrics-report.md
        echo "" >> metrics-report.md
        
        echo "### Dependency Tree" >> metrics-report.md
        echo "\`\`\`" >> metrics-report.md
        cargo tree --depth 2 >> metrics-report.md
        echo "\`\`\`" >> metrics-report.md

    - name: Upload metrics report
      uses: actions/upload-artifact@v4
      with:
        name: quality-metrics-report
        path: metrics-report.md
        retention-days: 90
